(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{552:function(s,t,a){"use strict";a.r(t);var v=a(2),_=Object(v.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"函数语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数语法"}},[s._v("#")]),s._v(" 函数语法")]),s._v(" "),t("p",[s._v("重复代码：让程序难以维护")]),s._v(" "),t("p",[s._v("函数主要用于减少重复代码")]),s._v(" "),t("h3",{attrs:{id:"创建-定义、声明-函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建-定义、声明-函数"}},[s._v("#")]),s._v(" 创建（定义、声明）函数")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("函数名")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 函数体")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("函数体的代码不会直接运行，必须要手动调用函数，才能运行其中的代码。")]),s._v(" "),t("h3",{attrs:{id:"调用函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#调用函数"}},[s._v("#")]),s._v(" 调用函数")]),s._v(" "),t("p",[s._v("运行函数体")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("函数名")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"函数提升"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数提升"}},[s._v("#")]),s._v(" 函数提升")]),s._v(" "),t("p",[s._v("通过字面量声明的函数，会提升到脚本块的顶部。")]),s._v(" "),t("p",[s._v("通过字面量声明的函数，会成为全局对象的属性。")]),s._v(" "),t("h3",{attrs:{id:"其他特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他特点"}},[s._v("#")]),s._v(" 其他特点")]),s._v(" "),t("p",[s._v('通过typeof 函数名，得到的结果是"function"')]),s._v(" "),t("p",[s._v("函数内部声明的变量：")]),s._v(" "),t("ol",[t("li",[s._v("如果不使用var声明，和全局变量一致，表示给全局对象添加属性")]),s._v(" "),t("li",[s._v("如果使用var声明，变量提升到所在函数的顶部，函数外部不可以使用该变量")])]),s._v(" "),t("p",[t("strong",[s._v("函数中声明的变量，仅能在函数中使用，在外部无效")])]),s._v(" "),t("h3",{attrs:{id:"参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[s._v("#")]),s._v(" 参数")]),s._v(" "),t("p",[s._v("参数表示函数运行的未知条件，需要调用者告知的数据")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 参数的有效返回在函数体中")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("函数名")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("形参"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 形参"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("函数名")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("实参"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("如果实参没有传递，则对应的形参为undefined")]),s._v(" "),t("h3",{attrs:{id:"返回值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#返回值"}},[s._v("#")]),s._v(" 返回值")]),s._v(" "),t("p",[s._v("函数运行后，得到的结果，调用函数时，调用表达式的值就是函数的返回值")]),s._v(" "),t("p",[s._v("return 会直接结束整个函数的运行")]),s._v(" "),t("p",[s._v("return 后面如果不跟任何数据，返回undefined")]),s._v(" "),t("p",[s._v("如果函数中没有书写return，则该函数会在末尾自动return undefined。")]),s._v(" "),t("h3",{attrs:{id:"文档注释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文档注释"}},[s._v("#")]),s._v(" 文档注释")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n *\n *\n*/")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h2",{attrs:{id:"作用域和闭包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作用域和闭包"}},[s._v("#")]),s._v(" 作用域和闭包")]),s._v(" "),t("h3",{attrs:{id:"作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[s._v("#")]),s._v(" 作用域")]),s._v(" "),t("p",[s._v("作用域表示一个代码区域，也表示一个运行环境")]),s._v(" "),t("p",[s._v("JS中，有两种作用域：")]),s._v(" "),t("ol",[t("li",[s._v("全局作用域")])]),s._v(" "),t("p",[s._v("直接在脚本中书写的代码")]),s._v(" "),t("p",[s._v("在全局作用域中声明的变量，会被提升到脚本块的顶部，并且会成为全局对象的属性。")]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[s._v("函数作用域")])]),s._v(" "),t("p",[s._v("函数中的代码")]),s._v(" "),t("p",[s._v("在函数作用域中声明的变量，会被提升到函数的顶部，并且不会成为全局对象的属性.")]),s._v(" "),t("p",[t("strong",[s._v("因此，函数中声明的变量不会导致全局对象的污染")])]),s._v(" "),t("p",[t("strong",[s._v("尽量的把功能封装在函数中")])]),s._v(" "),t("p",[s._v("但是，当函数成为一个表达式时，它既不会提升，也不会污染全局对象。")]),s._v(" "),t("p",[s._v("将函数变为一个函数表达式的方式之一，将函数用小括号括起来。")]),s._v(" "),t("p",[s._v("然而，这样一来，函数无法通过名称调用。")]),s._v(" "),t("p",[s._v("如果书写一个函数表达式，然后将立即调用，该函数称之为立即执行函数 IIFE（Imdiately Invoked Function Expression）。")]),s._v(" "),t("p",[s._v("由于大部分情况下，函数表达式的函数名没有实际意义，因此，可以省略函数名。")]),s._v(" "),t("p",[s._v("没有名字的函数，称之为匿名函数")]),s._v(" "),t("h3",{attrs:{id:"作用域中可以使用的变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作用域中可以使用的变量"}},[s._v("#")]),s._v(" 作用域中可以使用的变量")]),s._v(" "),t("p",[s._v("全局作用域只能使用全局作用域中声明的变量（包括函数）")]),s._v(" "),t("p",[s._v("函数作用域不仅能使用自身作用域中声明的变量（包括函数），还能使用外部环境的变量（包括函数）")]),s._v(" "),t("p",[s._v("有的时候，某个函数比较复杂，在编写的过程，可能需要另外一些函数来辅助它完成一些功能，而这些函数仅仅会被该函数使用，不会在其他位置使用，则可以将这些函数声明到该函数的内部。")]),s._v(" "),t("p",[s._v("函数内部声明的变量和外部冲突时，使用内部的。")]),s._v(" "),t("h3",{attrs:{id:"闭包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[s._v("#")]),s._v(" 闭包")]),s._v(" "),t("p",[s._v("闭包（closure），是一种现象，内部函数，可以使用外部函数环境中的变量。")]),s._v(" "),t("h2",{attrs:{id:"函数表达式和this"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数表达式和this"}},[s._v("#")]),s._v(" 函数表达式和this")]),s._v(" "),t("h3",{attrs:{id:"函数表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数表达式"}},[s._v("#")]),s._v(" 函数表达式")]),s._v(" "),t("p",[s._v("JS中，函数也是一个数据，语法上，函数可以用于任何需要数据的地方")]),s._v(" "),t("p",[s._v("JS中，函数是一等公民")]),s._v(" "),t("p",[s._v("函数是一个引用类型，将其赋值给某个变量时，变量中保存的是函数的地址")]),s._v(" "),t("h3",{attrs:{id:"this关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#this关键字"}},[s._v("#")]),s._v(" this关键字")]),s._v(" "),t("blockquote",[t("p",[s._v("this无法赋值")])]),s._v(" "),t("ol",[t("li",[s._v("在全局作用域中，this关键字固定指向全局对象。")]),s._v(" "),t("li",[s._v("在函数作用域中，取决于函数是如何被调用的\n"),t("ol",[t("li",[s._v("函数直接调用，this指向全局对象")]),s._v(" "),t("li",[s._v("通过一个对象的属性调用，格式为"),t("code",[s._v("对象.属性()")]),s._v("或"),t("code",[s._v('对象["属性"]()')]),s._v("，this指向对象")])])])]),s._v(" "),t("h2",{attrs:{id:"构造函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[s._v("#")]),s._v(" 构造函数")]),s._v(" "),t("blockquote",[t("p",[s._v("对象中的属性，如果是一个函数，也称该属性为对象的方法")])]),s._v(" "),t("h3",{attrs:{id:"用于创建对象的函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用于创建对象的函数"}},[s._v("#")]),s._v(" 用于创建对象的函数")]),s._v(" "),t("p",[s._v("用函数创建对象，可以减少繁琐的对象创建流程")]),s._v(" "),t("ol",[t("li",[s._v("函数返回一个对象")]),s._v(" "),t("li",[s._v("构造函数：构造函数专门用于创建对象")])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("函数名")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("参数"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果使用上面的格式创建对象，则该函数叫做构造函数。")]),s._v(" "),t("ol",[t("li",[s._v("函数名使用大驼峰命名法")]),s._v(" "),t("li",[s._v("构造函数内部，会自动创建一个新对象，this指向新创建的对象，并且自动返回新对象")]),s._v(" "),t("li",[s._v("构造函数中如果出现返回值，如果返回的是原始类型，则直接忽略；如果返回的是引用类型，则使用返回的结果")]),s._v(" "),t("li",[s._v("所有的对象，最终都是通过构造函数创建的")])]),s._v(" "),t("h2",{attrs:{id:"new-target"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#new-target"}},[s._v("#")]),s._v(" new.target")]),s._v(" "),t("p",[s._v("该表达式在函数中使用，返回的是当前的构造函数，但是，如果该函数不是通过new调用的，则返回undefined")]),s._v(" "),t("p",[s._v("通常用于判断某个函数是否是通过new在调用。")]),s._v(" "),t("h2",{attrs:{id:"函数的本质"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数的本质"}},[s._v("#")]),s._v(" 函数的本质")]),s._v(" "),t("p",[s._v("函数的本质就是对象。")]),s._v(" "),t("blockquote",[t("p",[s._v("某些教程中，将构造函数称之为构造器\n所有的对象都是通过关键字new出来的，"),t("code",[s._v("new 构造函数()")])])]),s._v(" "),t("p",[s._v("所有的函数，都是通过"),t("code",[s._v("new Function")]),s._v("创建。")]),s._v(" "),t("blockquote",[t("p",[s._v("Function")])]),s._v(" "),t("p",[s._v("由于函数本身就是对象，因此函数中，可以拥有各种属性。")]),s._v(" "),t("h3",{attrs:{id:"包装类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#包装类"}},[s._v("#")]),s._v(" 包装类")]),s._v(" "),t("p",[s._v("JS为了增强原始类型的功能，为boolean、string、number分别创建了一个构造函数：")]),s._v(" "),t("ol",[t("li",[s._v("Boolean")]),s._v(" "),t("li",[s._v("String")]),s._v(" "),t("li",[s._v("Number")])]),s._v(" "),t("p",[s._v("如果语法上，将原始类型当作对象使用时（一般是在使用属性时），JS会自动在该位置利用对应的构造函数，创建对象来访问原始类型的属性。")]),s._v(" "),t("blockquote",[t("p",[s._v("类：在JS中，可以认为，类就是构造函数")])]),s._v(" "),t("blockquote",[t("p",[s._v("成员属性（方法）、实例属性（方法）：表示该属性是通过构造函数创建的对象调用的。\n静态属性（方法）、类属性（方法）：表示该属性是通过构造函数本身调用的。")])]),s._v(" "),t("h2",{attrs:{id:"递归"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#递归"}},[s._v("#")]),s._v(" 递归")]),s._v(" "),t("p",[s._v("函数直接或间接调用自身")]),s._v(" "),t("p",[s._v("避免无限递归，无限递归会导致执行栈溢出。")]),s._v(" "),t("p",[s._v("对比死循环")]),s._v(" "),t("ul",[t("li",[s._v("死循环不会报错，也不会导致栈溢出")]),s._v(" "),t("li",[s._v("无限递归会导致栈溢出")])]),s._v(" "),t("h3",{attrs:{id:"执行栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行栈"}},[s._v("#")]),s._v(" 执行栈")]),s._v(" "),t("p",[s._v("任何代码的执行都必须有一个执行环境，执行环境为代码的执行提供支持")]),s._v(" "),t("p",[s._v("执行环境是放到执行栈中的。")]),s._v(" "),t("p",[s._v("每个函数的调用，都需要创建一个函数的执行环境，函数调用结束，执行环境销毁。")]),s._v(" "),t("p",[s._v("执行栈有相对固定的大小，如果执行环境太多，执行栈无法容纳，会报错")]),s._v(" "),t("h3",{attrs:{id:"尾递归"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#尾递归"}},[s._v("#")]),s._v(" 尾递归")]),s._v(" "),t("p",[s._v("如果一个函数最后一条语句是调用函数，并且调用函数不是表达式的一部分，则该语句称为尾调用，如果尾调用是调用自身函数，则称为尾递归。")]),s._v(" "),t("p",[s._v("某些语言或执行环境会对尾调用进行优化，它们会理解销毁当前函数，避免执行栈空间被占用。")]),s._v(" "),t("p",[s._v("在浏览器执行环境中，尾调用没有优化。但在nodejs环境中有优化。")])])}),[],!1,null,null,null);t.default=_.exports}}]);