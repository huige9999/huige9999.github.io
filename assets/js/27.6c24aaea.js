(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{448:function(s,a,t){s.exports=t.p+"assets/img/image-18.ef8291b1.png"},544:function(s,a,t){"use strict";t.r(a);var n=t(2),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"流程图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流程图"}},[s._v("#")]),s._v(" 流程图")]),s._v(" "),a("p",[s._v("一套的标准的图形，用于描述程序的逻辑")]),s._v(" "),a("p",[s._v("通常流程图分析程序的流程\n"),a("img",{attrs:{src:t(448),alt:"alt text"}})]),s._v(" "),a("h2",{attrs:{id:"if判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#if判断"}},[s._v("#")]),s._v(" if判断")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("条件"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 代码块")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("条件"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 代码块")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("条件"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 代码块")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//....")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 以上条件都不满足执行的代码块")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("ol",[a("li",[s._v("如果某个条件满足，则直接忽略后面的所有条件")]),s._v(" "),a("li",[s._v("else if 可以有多个（包含0个）")]),s._v(" "),a("li",[s._v("else可以有1个或0个")]),s._v(" "),a("li",[s._v("else可以换行，可以不换行")]),s._v(" "),a("li",[s._v("如果代码块只有一条语句，可以省略花括号（不推荐）")]),s._v(" "),a("li",[s._v("if只能出现一次")])]),s._v(" "),a("h3",{attrs:{id:"补充"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[s._v("#")]),s._v(" 补充")]),s._v(" "),a("ol",[a("li",[s._v('用户输入: prompt("提示文本")')])]),s._v(" "),a("p",[s._v("该表达式返回结果：")]),s._v(" "),a("ol",[a("li",[s._v("null：表示用户点击了取消")]),s._v(" "),a("li",[s._v("用户输入的字符串：表示用户点击了确定，得到用户输入的结果")])]),s._v(" "),a("p",[s._v("返回类型：null 或 字符串")]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[s._v("将字符串转换成数字：+字符串")])]),s._v(" "),a("li",[a("p",[s._v("得到一个随机数")])])]),s._v(" "),a("p",[s._v("Math.random() 该表达式返回一个0~1之间的随机数字（无法取到1）")]),s._v(" "),a("h2",{attrs:{id:"switch-开关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#switch-开关"}},[s._v("#")]),s._v(" switch 开关")]),s._v(" "),a("p",[s._v("switch的语法始终可以使用if结构替代。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("表达式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" 数据"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        代码块\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" 数据"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        代码块\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//...")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        代码块\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("ol",[a("li",[s._v("计算表达式的返回值，依次和case后面的数据进行严格相等的比较，如果某个相等，停止比较，然后运行其内部的代码块，再然后，依次运行之后的所有代码块。")]),s._v(" "),a("li",[s._v("在case分支内部，使用break语句，可以立即停止switch结构。")]),s._v(" "),a("li",[s._v("default表示前面的所有case都不匹配时运行。可以省略")])]),s._v(" "),a("h2",{attrs:{id:"循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环"}},[s._v("#")]),s._v(" 循环")]),s._v(" "),a("p",[s._v("重复的运行一段代码")]),s._v(" "),a("p",[s._v("JS支持3种循环结构：while循环、do-while循环、for循环")]),s._v(" "),a("h3",{attrs:{id:"while循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#while循环"}},[s._v("#")]),s._v(" while循环")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    代码块（循环体）\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"do-while循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#do-while循环"}},[s._v("#")]),s._v(" do-while循环")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    循环体\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"for循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for循环"}},[s._v("#")]),s._v(" for循环")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("初始化表达式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" 条件改变表达式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    循环体\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"循环中的关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环中的关键字"}},[s._v("#")]),s._v(" 循环中的关键字")]),s._v(" "),a("p",[s._v("循环控制语句")]),s._v(" "),a("ul",[a("li",[s._v("break; 跳出循环")]),s._v(" "),a("li",[s._v("continue; 停止当前循环体，进入下一次循环。")])]),s._v(" "),a("h2",{attrs:{id:"数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[s._v("#")]),s._v(" 数组")]),s._v(" "),a("p",[s._v("数组用于存放多个数据")]),s._v(" "),a("h3",{attrs:{id:"创建一个数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建一个数组"}},[s._v("#")]),s._v(" 创建一个数组")]),s._v(" "),a("ol",[a("li",[s._v("new Array(长度)")])]),s._v(" "),a("p",[s._v("长度，数组里面的数据总数，长度一定是一个非负整数")]),s._v(" "),a("p",[s._v("new Array(数据, 数据, 数据....)")]),s._v(" "),a("p",[s._v("创建一个数组，并初始化其每一项的值")]),s._v(" "),a("p",[s._v("数组项：数组其中的一项数据")]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("[数据,数据,数据,....]")])]),s._v(" "),a("p",[s._v("创建一个数据，并初始化其每一项的值")]),s._v(" "),a("h3",{attrs:{id:"认识数组的本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#认识数组的本质"}},[s._v("#")]),s._v(" 认识数组的本质")]),s._v(" "),a("p",[s._v("数组的本质是一个对象")]),s._v(" "),a("ul",[a("li",[s._v("length属性：数组的长度，会自动变化，值为最大下标+1")]),s._v(" "),a("li",[s._v("数字字符串属性：叫做下标，也叫做索引，相当于数组中每个数据的编号，下标从0开始排列")])]),s._v(" "),a("p",[s._v("连续下标的取值范围：0 ~ length -1，如果给length直接赋值，会导致数组可能被截断")]),s._v(" "),a("p",[s._v("实际开发中，不要给length赋值。")]),s._v(" "),a("h3",{attrs:{id:"下标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#下标"}},[s._v("#")]),s._v(" 下标")]),s._v(" "),a("p",[s._v("通常情况下，下标是连续的。")]),s._v(" "),a("p",[s._v("下标不连续的数组，叫做稀松数组。")]),s._v(" "),a("h3",{attrs:{id:"数组的常见操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组的常见操作"}},[s._v("#")]),s._v(" 数组的常见操作")]),s._v(" "),a("h4",{attrs:{id:"添加数组项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加数组项"}},[s._v("#")]),s._v(" 添加数组项")]),s._v(" "),a("ul",[a("li",[s._v("数组[长度] = 数据：向数组末尾添加一个数据")]),s._v(" "),a("li",[s._v("数组.push(数据): 向数组末尾添加一个数据")]),s._v(" "),a("li",[s._v("数组.unshift(数据)：向数组起始位置添加一个数据，会导致数组每一项的下标向后移动")]),s._v(" "),a("li",[s._v("数组.splice(下标, 0, 添加的数据): 从指定下标位置开始，删除0个，然后在该位置插入添加的数据，如果下标超过范围，则按照范围的边界进行处理。")])]),s._v(" "),a("p",[s._v("push、unshift、splice可以添加多个数据")]),s._v(" "),a("h4",{attrs:{id:"删除数组项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除数组项"}},[s._v("#")]),s._v(" 删除数组项")]),s._v(" "),a("ul",[a("li",[s._v("delete 数组[下标]: 这种做法不会导致数组其他的属性发生变化，因此，该做法会导致产生稀松数组，所以不推荐使用该做法。")]),s._v(" "),a("li",[s._v("数组.pop(): 删除数组的最后一项，该表达式返回最后一项的数据")]),s._v(" "),a("li",[s._v("数组.shift()：删除数组第一项，该表达式返回第一项的数据")]),s._v(" "),a("li",[s._v("数组.splice(下标, 删除的数量, 添加的数据): 从指定下标位置开始，删除指定数量，然后在该位置插入添加的数据，如果下标超过范围，则按照范围的边界进行处理。返回一个新数组，该数组记录被删除的数据。")])]),s._v(" "),a("h4",{attrs:{id:"其他操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他操作"}},[s._v("#")]),s._v(" 其他操作")]),s._v(" "),a("ul",[a("li",[s._v("数组.slice(起始位置下标, 结束位置下标)：将起始位置到结束位置之间的数据拿出来，得到一个新的数组，该函数不会改变原数组；注意：结束下标取不到")])]),s._v(" "),a("p",[s._v("下标可以写负数，如果是负数，则从数组的末尾开始计算。")]),s._v(" "),a("p",[s._v("如果不写结束下标，则直接取到末尾。")]),s._v(" "),a("ul",[a("li",[s._v("数组清空")])]),s._v(" "),a("p",[s._v("数组.splice(0, 数组.length);")]),s._v(" "),a("p",[s._v("数组.length = 0;")]),s._v(" "),a("ul",[a("li",[s._v("查找数组中某一项的下标")])]),s._v(" "),a("p",[s._v("数组.indexOf(数据)")]),s._v(" "),a("p",[s._v("从数组中依次查找对应的数据，查找时使用严格相等进行比较。找到第一个匹配的下标，返回。如果没有找到，则得到-1；")]),s._v(" "),a("p",[s._v("数组.lastIndexOf(数据)")]),s._v(" "),a("p",[s._v("功能和indexOf类似，只是查找的是最后一个匹配的下标")]),s._v(" "),a("ul",[a("li",[s._v("数组.fill")])]),s._v(" "),a("p",[s._v("数组.fill(数据)：将数组的所有项，填充为指定的数据")]),s._v(" "),a("p",[s._v("数组.fill(数组, 开始下标): 将数组从开始下标起，到数组的末尾，填充为指定的数据")]),s._v(" "),a("p",[s._v("数组.fill(数组, 开始下标，结束下标): 将数组从开始下标起，到数组的结束下标（取不到），填充为指定的数据")]),s._v(" "),a("h3",{attrs:{id:"语法补充"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法补充"}},[s._v("#")]),s._v(" 语法补充")]),s._v(" "),a("h4",{attrs:{id:"in关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#in关键字"}},[s._v("#")]),s._v(" in关键字")]),s._v(" "),a("p",[s._v("判断某个属性在对象中是否存在")]),s._v(" "),a("p",[s._v("属性名 in 对象")]),s._v(" "),a("h4",{attrs:{id:"for-in-foreach-循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-in-foreach-循环"}},[s._v("#")]),s._v(" for-in  foreach 循环")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" prop "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" 对象"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//循环体")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("取出对象的所有属性名，每次循环将其中一个属性名赋值给变量prop，运行循环体。")])])}),[],!1,null,null,null);a.default=e.exports}}]);