(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{525:function(v,_,a){"use strict";a.r(_);var t=a(2),s=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"运算符概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#运算符概述"}},[v._v("#")]),v._v(" 运算符概述")]),v._v(" "),_("p",[v._v("变量和数据类型，解决数据存放问题\n运算符，解决数据运算的问题")]),v._v(" "),_("h3",{attrs:{id:"操作符和操作数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#操作符和操作数"}},[v._v("#")]),v._v(" 操作符和操作数")]),v._v(" "),_("p",[v._v("操作符：运算符，参与运算的符号")]),v._v(" "),_("p",[v._v("操作数：参与运算的数据，也称之为“元”")]),v._v(" "),_("p",[v._v("操作符不一定只有一个符号")]),v._v(" "),_("p",[v._v("操作符出现在不同的位置，可能具有不同的含义")]),v._v(" "),_("div",{staticClass:"language-js line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token number"}},[v._v("1")]),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("2")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("1.2")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br")])]),_("p",[v._v("目前接触的操作符：")]),v._v(" "),_("ol",[_("li",[_("code",[v._v("=")]),v._v("：赋值符号，将右边的数据赋值给左边")]),v._v(" "),_("li",[_("code",[v._v(".")]),v._v(": 访问符号，用于访问对象的属性")]),v._v(" "),_("li",[_("code",[v._v("[]")]),v._v("：访问符号，用于访问对象的属性")]),v._v(" "),_("li",[_("code",[v._v("()")]),v._v("：函数调用")])]),v._v(" "),_("h3",{attrs:{id:"分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[v._v("#")]),v._v(" 分类")]),v._v(" "),_("p",[v._v("按操作数数量区分：")]),v._v(" "),_("ol",[_("li",[v._v("一元（目）运算符：()  .  []")]),v._v(" "),_("li",[v._v("二元（目）运算符: +  -  / * % =")]),v._v(" "),_("li",[v._v("三元（目）运算符: ?:")])]),v._v(" "),_("p",[v._v("功能区分：")]),v._v(" "),_("ol",[_("li",[v._v("算术运算符（数学）")]),v._v(" "),_("li",[v._v("比较运算符")]),v._v(" "),_("li",[v._v("逻辑运算符")]),v._v(" "),_("li",[v._v("位运算符")]),v._v(" "),_("li",[v._v("其他")])]),v._v(" "),_("h3",{attrs:{id:"表达式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#表达式"}},[v._v("#")]),v._v(" 表达式")]),v._v(" "),_("p",[v._v("表达式 = 操作符 + 操作数")]),v._v(" "),_("p",[v._v("每个表达式都有一个运算结果，该结果叫做"),_("strong",[v._v("返回值")]),v._v("，返回值的类型叫做"),_("strong",[v._v("返回类型")])]),v._v(" "),_("p",[v._v("所有的表达式都可以当作数据使用。")]),v._v(" "),_("p",[v._v("目前学习的运算符的返回值和类型")]),v._v(" "),_("ol",[_("li",[_("code",[v._v("=")]),v._v("：该表达式，返回赋值的结果")]),v._v(" "),_("li",[_("code",[v._v(".")]),v._v("：属性访问表达式，返回的是属性的值")]),v._v(" "),_("li",[_("code",[v._v("[]")]),v._v("：属性访问表达式，返回的是属性的值")]),v._v(" "),_("li",[_("code",[v._v("()")]),v._v("：函数调用表达式，返回的结果取决于函数的运行")]),v._v(" "),_("li",[v._v("如果是一个声明+赋值的表达式，返回结果为undefined。")])]),v._v(" "),_("p",[v._v("console.log函数调用的返回结果为undefined")]),v._v(" "),_("blockquote",[_("p",[v._v("chrome浏览器控制台的环境是REPL环境\nREPL：Read Eval Print Loop，读-执行-打印-循环\n当直接在控制台书写代码时，除了运行代码之外，还会输出该表达式的返回值")])]),v._v(" "),_("h2",{attrs:{id:"算术运算符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#算术运算符"}},[v._v("#")]),v._v(" 算术运算符")]),v._v(" "),_("p",[v._v("数学运算符")]),v._v(" "),_("ol",[_("li",[_("code",[v._v("+ - * /")])]),v._v(" "),_("li",[_("code",[v._v("+ -")])]),v._v(" "),_("li",[_("code",[v._v("%")])]),v._v(" "),_("li",[_("code",[v._v("++ --")])]),v._v(" "),_("li",[_("code",[v._v("**")]),v._v(" 幂")])]),v._v(" "),_("h3",{attrs:{id:"细节"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#细节"}},[v._v("#")]),v._v(" 细节")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("数字运算是不精确的")])]),v._v(" "),_("li",[_("p",[v._v("除数为0")])])]),v._v(" "),_("p",[v._v("如果被除数是正数，得到结果 Infinity （正无穷）\n如果被除数是负数，得到结果 -Infinity （负无穷）\n如果被除数是0，得到结果 NaN （Not a Number，非数字）")]),v._v(" "),_("blockquote",[_("p",[v._v("typeof函数返回类型为string\nisNaN函数，该函数用于判断一个数据是否是NaN，返回boolean\nisFinite函数，该函数用于判断一个数据是否是有限的，返回boolean")])]),v._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[v._v("求余")])]),v._v(" "),_("p",[v._v("%，有的教程称之为求模")]),v._v(" "),_("p",[v._v("余数的符号，与被除数相同。")]),v._v(" "),_("h3",{attrs:{id:"其他类型使用算术运算"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#其他类型使用算术运算"}},[v._v("#")]),v._v(" 其他类型使用算术运算")]),v._v(" "),_("ol",[_("li",[v._v("除加号之外的算术运算符")])]),v._v(" "),_("p",[v._v("将原始类型转换为数字类型（自动完成转换），然后进行运算。")]),v._v(" "),_("ul",[_("li",[v._v("boolean： true -> 1, false -> 0")]),v._v(" "),_("li",[v._v("string: 如果字符串内部是一个正确的数字，直接变为数字，如果是一个非数字，则得到NaN（能识别Infinity，不能把字符串内部的东西当作表达式），如果字符串是一个空字符串（没有任何内容），转换为0. 字符串转换时，会忽略前后空格。")])]),v._v(" "),_("blockquote",[_("p",[v._v("NaN虽然是数字，但它和任何数字作任何运算，得到的结果都是NaN")])]),v._v(" "),_("ul",[_("li",[v._v("null：null -> 0")]),v._v(" "),_("li",[v._v("undefined: undefined -> NaN")])]),v._v(" "),_("p",[v._v("将对象类型先转换为字符串类型，然后再将该字符串转换为数字类型")]),v._v(" "),_("p",[v._v('对象类型 -> "[object Object]" -> NaN')]),v._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[v._v("加号运算符")])]),v._v(" "),_("ul",[_("li",[v._v("加号一边有字符串，含义变为字符串拼接")])]),v._v(" "),_("p",[v._v("将另一边的其他类型，转换为字符串")]),v._v(" "),_("p",[v._v('数字 -> 数字字符串\nboolean -> boolean字符串\nnull -> "null"\nundefined -> "undefined"\n对象 -> "[object Object]"')]),v._v(" "),_("ul",[_("li",[_("p",[v._v("加号两边都没有字符串，但一边有对象，将对象转换为字符串，然后按照上面的规则进行")])]),v._v(" "),_("li",[_("p",[v._v("其他情况和上面的数学运算一致")])])]),v._v(" "),_("h2",{attrs:{id:"自增和自减"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#自增和自减"}},[v._v("#")]),v._v(" 自增和自减")]),v._v(" "),_("h3",{attrs:{id:"基本功能"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基本功能"}},[v._v("#")]),v._v(" 基本功能")]),v._v(" "),_("p",[v._v("一元运算符")]),v._v(" "),_("p",[v._v("++：将某个变量的值自增1")]),v._v(" "),_("p",[v._v("--：将某个变量的值自减1")]),v._v(" "),_("h3",{attrs:{id:"细节-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#细节-2"}},[v._v("#")]),v._v(" 细节")]),v._v(" "),_("h4",{attrs:{id:"自增自减表达式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#自增自减表达式"}},[v._v("#")]),v._v(" 自增自减表达式")]),v._v(" "),_("p",[v._v("x++: 将变量x自增1，得到的表达式的值是自增之前的值。\n++x: 将变量x自增1，得到的表达式的值是自增之后的值。\nx--: 将变量x自减1，得到的表达式的值是自减之前的值。\n--x: 将变量x自减1，得到的表达式的值是自减之后的值。")]),v._v(" "),_("h4",{attrs:{id:"优先级"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#优先级"}},[v._v("#")]),v._v(" 优先级")]),v._v(" "),_("p",[v._v("从高到底依次是：")]),v._v(" "),_("ol",[_("li",[_("code",[v._v("++ --")])]),v._v(" "),_("li",[_("code",[v._v("* / %")])]),v._v(" "),_("li",[_("code",[v._v("+ -")])])]),v._v(" "),_("p",[v._v("优先级的运算细节：")]),v._v(" "),_("ol",[_("li",[v._v("从左到右依次查看")]),v._v(" "),_("li",[v._v("如果遇到操作数，将数据的值直接取出")]),v._v(" "),_("li",[v._v("如果遇到相邻的两个运算符，并且左边的运算符优先级大于等于右边的运算符，则直接运行左边的运算符。")])]),v._v(" "),_("h2",{attrs:{id:"比较运算符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#比较运算符"}},[v._v("#")]),v._v(" 比较运算符")]),v._v(" "),_("p",[v._v("TODO 待补充")]),v._v(" "),_("h2",{attrs:{id:"逻辑运算符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符"}},[v._v("#")]),v._v(" 逻辑运算符")]),v._v(" "),_("h2",{attrs:{id:"三目运算符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三目运算符"}},[v._v("#")]),v._v(" 三目运算符")]),v._v(" "),_("h2",{attrs:{id:"运算符补充"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#运算符补充"}},[v._v("#")]),v._v(" 运算符补充")]),v._v(" "),_("h2",{attrs:{id:"数字的存储"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数字的存储"}},[v._v("#")]),v._v(" 数字的存储")]),v._v(" "),_("h2",{attrs:{id:"位运算"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#位运算"}},[v._v("#")]),v._v(" 位运算")]),v._v(" "),_("h2",{attrs:{id:"求余和求模"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#求余和求模"}},[v._v("#")]),v._v(" 求余和求模")])])}),[],!1,null,null,null);_.default=s.exports}}]);