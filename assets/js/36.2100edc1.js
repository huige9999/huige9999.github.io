(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{528:function(s,n,a){"use strict";a.r(n);var e=a(2),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"相关面试题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#相关面试题"}},[s._v("#")]),s._v(" 相关面试题")]),s._v(" "),n("h3",{attrs:{id:"babel是什么-它在javascript开发中的作用是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#babel是什么-它在javascript开发中的作用是什么"}},[s._v("#")]),s._v(" babel是什么,它在JavaScript开发中的作用是什么?")]),s._v(" "),n("p",[s._v("babel是一个JavaScript编译器,主要用于将现代JavaScript代码(包括ES6及更高版本的语法),转换为向后兼容的JavaScript代码,\n以确保在旧版本的浏览器或环境中也能运行,它的作用包括：")]),s._v(" "),n("ol",[n("li",[s._v("语法转换：将现代JavaScript语法(如箭头函数、类、模板字符串等)转换为ES5兼容的语法。")]),s._v(" "),n("li",[s._v("Polyfills：通过使用工具如"),n("code",[s._v("@babel/polyfill")]),s._v("，可以为缺失的JavaScript功能(如:"),n("code",[s._v("Promise")]),s._v("、"),n("code",[s._v("Array.includes")]),s._v("等)添加兼容性支持。")]),s._v(" "),n("li",[s._v("插件化架构: babel使用插件来扩展其功能,可以根据项目需求加载不同插件进行定制。")]),s._v(" "),n("li",[s._v("代码优化和压缩: 虽然主要用于语法转换,babel也可以与其他工具(如Terser)集成,以优化和压缩代码。")])]),s._v(" "),n("h3",{attrs:{id:"解释babel插件和预设的区别-并举例说明如何在项目中使用它们"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解释babel插件和预设的区别-并举例说明如何在项目中使用它们"}},[s._v("#")]),s._v(" 解释babel插件和预设的区别，并举例说明如何在项目中使用它们")]),s._v(" "),n("p",[s._v("插件和预设都用于配置babel的行为,但它们有不同的用途和方式。")]),s._v(" "),n("ul",[n("li",[s._v("插件(Plugins): 插件时babel的基本转换单元,负责特定的代码转换任务。例如,将箭头函数转换为普通函数的插件"),n("code",[s._v("@babel/plugin-transform-arrow-functions")]),s._v("。")]),s._v(" "),n("li",[s._v("预设(Presets): 预设时多个插件的集合,用于简化配置。例如,"),n("code",[s._v("@babel/preset-env")]),s._v("预设包含了一系列插件,能够根据目标环境自动选择和加载所需要的插件,以实现ES6+到ES5的转换。")])]),s._v(" "),n("p",[n("strong",[s._v("使用示例")]),s._v("\n在项目中,通常会创建一个"),n("code",[s._v(".babelrc")]),s._v("文件进行配置：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("{\n 'presets': ['@babel/preset-env'],\n 'plugins': ['@babel/plugin-transform-runtime']\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("这里,"),n("code",[s._v("@babel/preset-env")]),s._v("预设负责将现代JavaScript语法转换为兼容的版本,而"),n("code",[s._v("@babel/plugin-transform-runtime")]),s._v("插件提取babel的辅助函数到外部模块(而不是重复插入到每个模块中)，避免全局污染。")]),s._v(" "),n("h3",{attrs:{id:"什么是抽象语法树-ast-它在babel中的作用是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是抽象语法树-ast-它在babel中的作用是什么"}},[s._v("#")]),s._v(" 什么是抽象语法树(AST),它在babel中的作用是什么?")]),s._v(" "),n("p",[s._v("抽象语法树(AST)是源代码的抽象语法结构的树状表示,其中每个节点都代表源代码中的一种结构,在编译器和babel的工作流程中,AST扮演着重要的角色。")]),s._v(" "),n("p",[n("strong",[s._v("AST在babel中的作用")])]),s._v(" "),n("ol",[n("li",[s._v("代码解析(Parsing): Babel首先解析源代码,生成AST。解析器(如Babylon)将源代码转换为AST,这是源代码转换的第一步。")]),s._v(" "),n("li",[s._v("代码转换(Transformation): Babel插件对AST进行遍历和修改,根据需要转换特定的语法结构。例如,箭头函数插件会找到AST中的箭头函数节点,并将其转换为普通函数节点。")]),s._v(" "),n("li",[s._v("代码生成(Code Generation): 在完成所有转换后,Babel将修改后的AST转换回JavaScript代码。这一步通过生成器(如Babel生成器)实现的")])]),s._v(" "),n("h2",{attrs:{id:"babel基础使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#babel基础使用"}},[s._v("#")]),s._v(" babel基础使用")]),s._v(" "),n("h3",{attrs:{id:"基本代码转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本代码转换"}},[s._v("#")]),s._v(" 基本代码转换")]),s._v(" "),n("ol",[n("li",[s._v("安装依赖")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("@babel/cli、@babel/core、@babel/preset-env\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ol",{attrs:{start:"2"}},[n("li",[s._v(".babeirc配置文件添加预设")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('{\n  "presets": ["@babel/preset-env"]\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ol",{attrs:{start:"3"}},[n("li",[s._v("脚本命令")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("babel src -d dist\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"转换typescript代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#转换typescript代码"}},[s._v("#")]),s._v(" 转换typescript代码")]),s._v(" "),n("ol",[n("li",[s._v("添加typescript的预设")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('{\n  "presets": ["@babel/preset-env", "@babel/preset-typescript"]\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ol",{attrs:{start:"2"}},[n("li",[s._v("脚本命令")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("babel src/index.ts -o dist/index.js\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"babel进阶"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#babel进阶"}},[s._v("#")]),s._v(" babel进阶")]),s._v(" "),n("h3",{attrs:{id:"自定义babel插件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义babel插件"}},[s._v("#")]),s._v(" 自定义babel插件")]),s._v(" "),n("p",[s._v("插件系统分为两大部分")]),s._v(" "),n("ul",[n("li",[s._v("插件底座")]),s._v(" "),n("li",[s._v("插件协议")])]),s._v(" "),n("p",[n("strong",[s._v("理解：")])]),s._v(" "),n("ul",[n("li",[s._v("插件底座是个有核心功能的容器")]),s._v(" "),n("li",[s._v("插件协议描述插件对象长啥样")]),s._v(" "),n("li",[s._v("符合协议的插件对象可以放到容器里待插件对象去使用")])]),s._v(" "),n("h4",{attrs:{id:"案例-caculator-插件系统"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#案例-caculator-插件系统"}},[s._v("#")]),s._v(" 案例: Caculator(插件系统)")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\nconst CalcutatorInterceptors = {}\n\nclass Caculator {\n    plugins = new Map();\n    constructor() {\n     // 计算逻辑的名称和计算逻辑的函数\n     // plugins = new Map();\n     // 约定一下插件的协议\n    /**\n     * {\n     *  name: 'add',\n     *  handler: function(a,b){return a+b}    \n     * }\n     */\n    }\n    // 注册插件的逻辑\n    use(plugin) {\n        this.plugins.set(plugin.name, plugin.handler);\n    }\n    // 执行插件的逻辑\n    invoke(name,...args) {\n        if(!this.plugins.has(name)) {\n            throw new Error(`plugin ${name} not found`);\n        }\n        // 前置处理\n        CalcutatorInterceptors.enter?.[name] && CalcutatorInterceptors.enter[name](name,...args)\n        // 执行核心逻辑\n        const result = this.plugins.get(name)(...args);\n        // 后置处理\n        CalcutatorInterceptors.exit?.[name] && CalcutatorInterceptors.exit[name](name, result,...args)\n        return result;\n    }\n\n}\n\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 所有权交给开发者(具体功能实现交给开发者)\nconst addPlugin = {\n    name: 'add',\n    handler: function(a, b) {\n        return a + b;\n    }\n}\nconst multiplyPlugin = {\n    name:'multiply',\n    handler: function(a, b) {\n        return a * b;\n    }\n}\n\nconst caculator = new Caculator();\n\n// 对比Vue.use(Pinia)\ncaculator.use(addPlugin);\ncaculator.use(multiplyPlugin);\n\n// 面向切面，增强插件参数的功能\nCalcutatorInterceptors.enter = {\n    add: function(name,...args) {\n        console.log(`before invoke add`,...args);\n    }\n}\nconsole.log(caculator.invoke('add', 1, 2)); // 3\n\n// 面向切面，增强插件返回值的功能\n// 类比：axios.request.interceptors.use((config)=>{})\nCalcutatorInterceptors.exit = {\n    add: function(name, result,...args) {\n        console.log(`after invoke add`, result,...args);\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br")])]),n("h4",{attrs:{id:"案例-箭头函数转换的插件封装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#案例-箭头函数转换的插件封装"}},[s._v("#")]),s._v(" 案例：箭头函数转换的插件封装")]),s._v(" "),n("p",[s._v("需求：将箭头函数转换为普通函数")]),s._v(" "),n("ol",[n("li",[s._v("自定义一个插件并引入")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('/plugins/arrow-functions.js\n\nbabelrc配置文件:\n{\n  "plugins": ["./plugins/arrow-functions"]\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("ol",{attrs:{start:"2"}},[n("li",[s._v("编写插件代码")])]),s._v(" "),n("p",[s._v("babel插件的协议：")]),s._v(" "),n("ol",[n("li",[s._v("是一个函数")]),s._v(" "),n("li",[s._v("函数返回一个对象")]),s._v(" "),n("li",[s._v("对象有一个visitor属性")]),s._v(" "),n("li",[s._v("visitor属性的key式babel ast节点类型，比如ArrowFunctionExpression")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("module.exports = function() {\n    return {\n        visitor: {\n            VariableDeclaration(path) {\n                // 将const变量声明转换为var变量声明\n                if (path.node.kind === 'const') {\n                    path.node.kind = 'var';\n                }\n            },\n            ArrowFunctionExpression(path) {\n\n            }\n        }\n    }\n}\n\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("p",[s._v("具体的转换逻辑可以借助babel的一些库来辅助\n"),n("strong",[s._v("方法1：使用types辅助修改")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const { types: t } = require('@babel/core');\n\nvisitor: {\n    arrowFunctionExpression(path) {\n        const { node } = path;\n\n        const functionExpression = t.functionExpression(null, node.params, node.body, node.generator);\n        // 处理箭头函数没有函数体的情况\n        if(t.isBlockStatement(node.body)) {\n            functionExpression.body = t.blockStatement([t.returnStatement(node.body)])\n        }\n        // 替换箭头函数\n        path.replaceWith(functionExpression);\n    }\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[n("strong",[s._v("方法2：使用@babel/helper-plugin-utils辅助修改")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// declare 是一个辅助工具，可以确保插件在合适的 Babel API 环境中运行，并为插件注入 Babel 的 API。\nconst { declare } = require('@babel/helper-plugin-utils');\n\nmodule.exports = declare((api, options) => {\n    // 用来确定是否需要强制遵循箭头函数的语法规范。\n   const noNewArrows = api.assumption('noNewArrows') ?? !options.spec;\n\n    return {\n        name: 'transform-arrow-functions',\n        visitor: {\n            ArrowFunctionExpression(path) {\n                // 如果当前节点不是箭头函数表达式，则直接返回。\n               if(!path.isArrowFunctionExpression()) return;\n               // 将箭头函数转换为普通函数表达式，传入的参数用于配置转换细节。\n               path.arrowFunctionToExpression({\n                allowInsertArrow: false,\n                noNewArrows,\n                specCompliant: !noNewArrows\n               });\n            }\n        }\n    }\n});\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("h3",{attrs:{id:"babel编译过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#babel编译过程"}},[s._v("#")]),s._v(" babel编译过程")]),s._v(" "),n("p",[s._v("转换型编译器的执行流程")]),s._v(" "),n("ul",[n("li",[s._v("tokenizer: 词法分析，将代码分割成一个个token")]),s._v(" "),n("li",[s._v("parser: 语法分析，将token转换成AST")]),s._v(" "),n("li",[s._v("transformer: 转换器，对AST进行转换，比如将箭头函数转换为普通函数")]),s._v(" "),n("li",[s._v("generator: 代码生成器，将AST转换成代码")])]),s._v(" "),n("p",[s._v("需求：将源代码const转换为var")]),s._v(" "),n("ol",[n("li",[s._v("安装依赖")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("@babel/core、@babel/parser、@babel/traverse、@babel/generator\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ol",{attrs:{start:"2"}},[n("li",[s._v("编写compiler代码")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 解析成ast\nconst parser = require('@babel/parser');\n\n// 遍历\nconst traverse = require('@babel/traverse').default;\n\n// 生成代码\nconst generator = require('@babel/generator').default;\n\nconst sourceCode = `const a = 1`;\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 1. 将源代码解析成ast\nconst ast = parser.parse(sourceCode);\n\n// 2. 遍历AST,将AST中的某些节点，修改为我们想要的内容 const => var\n// 第一种方式：访问者模式\nconst visitor = {\n    VariableDeclaration(path) {\n        // 将const变量声明转换为var变量声明\n        if (path.node.kind === 'const') {\n            path.node.kind = 'var';\n        }\n    }\n}\n\nconst newAst = traverse(ast, visitor);\n\n// 第二种方式：状态机\nconst visitor2 = {\n    enter(path) {\n        if (path.node.kind === 'const') {\n            path.node.kind = 'var';\n        }\n    }\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 3. ast转换成代码\nconst newCode = generator(newAst, {}, sourceCode).code;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("img",{attrs:{src:"image/image.png",alt:"alt text"}})]),s._v(" "),n("h2",{attrs:{id:"编译原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编译原理"}},[s._v("#")]),s._v(" 编译原理")]),s._v(" "),n("p",[n("img",{attrs:{src:"image/image-1.png",alt:"alt text"}})]),s._v(" "),n("ul",[n("li",[s._v('词法分析：将代码转换成单词流，称为"词法单元"(tokens)，每个词法单元包含一个标识符和一个属性值，比如变量名、数字、操作符等等\n词法分析生成token的方法有2种：1. 正则表达式；2. 状态机')])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("[const, a, =, 1]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("语法分析： 将词法单元流转换成抽象语法树(AST)，也就是标记所构成的数据结构，表示源代码的结构和规则")]),s._v(" "),n("li",[s._v("语义分析： 在AST上执行类型检查，作用域检查等操作，确保代码的正确性")]),s._v(" "),n("li",[s._v("代码生成： 基于AST生成目标代码,包括优化代码结构、生成代码文本、进行代码压缩等。")])]),s._v(" "),n("h3",{attrs:{id:"案例-公式编译执行器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#案例-公式编译执行器"}},[s._v("#")]),s._v(" 案例：公式编译执行器")]),s._v(" "),n("p",[s._v("需求：转换执行如何下公式")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Add(1,MINUS(2,3))\nSubtract(Add(3,Multiply(4,2)),Divide(6,2))\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 1. tokens\n// 2. ast parser\n// 3. interpreter\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 1. token定义\n// 用于提取公式中的函数名\nconst FN_NAME_TOKEN = /[a-zA-Z]/\n// 用于提取数字\nconst NUMBER_TOKEN = /\\d/\n// 用于提取左括号\nconst LEFT_PAREN_TOKEN = /\\(/\n// 用于提取右括号\nconst RIGHT_PAREN_TOKEN = /\\)/\n// 用于提取“,”\nconst COMMA_TOKEN = /,/\n\n// 2. tokenizer\nfunction tokenizer(code) {\n    const tokens = [];\n    let current = 0; // 当前指针\n    while (current < code.length) {\n        let char = code[current];\n\n        // 先匹配数字\n        if (NUMBER_TOKEN.test(char)) {\n            // 贪婪匹配数字\n            let value = '';\n            while (NUMBER_TOKEN.test(char)) {\n                value += char; // 当前字符存起来\n                current++; // 指针后移\n                char = code[current]; // 取下一个字符\n            }\n            // 将匹配到的数字token加入到tokens中\n            tokens.push({ type: 'number', value: parseInt(value) });\n            continue;\n        }\n\n        // 再匹配函数名\n        if(FN_NAME_TOKEN.test(char)) {\n            let value = '';\n            // 贪婪匹配函数名\n            while (FN_NAME_TOKEN.test(char)) {\n                value += char; // 当前字符存起来\n                current++; // 指针后移\n                char = code[current]; // 取下一个字符\n            }\n            // 将匹配到的函数名token加入到tokens中\n            tokens.push({ type: 'function', value });\n            continue;\n        }\n\n        // 匹配括号和逗号\n        if(LEFT_PAREN_TOKEN.test(char) || RIGHT_PAREN_TOKEN.test(char) || COMMA_TOKEN.test(char)) {\n            tokens.push({\n                type: char,\n                value: char\n            })\n            current++; // 指针后移\n            continue;\n        }\n\n        // 处理空格\n        if(char === \" \") {\n            current++; // 指针后移\n            continue;\n        }\n\n        // 其他情况则抛出异常\n        throw new TypeError('I dont know what this charactor is:'+ char);\n\n\n\n        current++; // 指针后移\n    }\n\n\n    return tokens;\n}\n\nconst tokens = tokenizer('Add(1,MINUS(2,3))');\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 3.parser\nfunction parser(tokens) {\n\n    function traverse() {\n        let token = tokens[current];\n\n        // 处理数字\n        if(token.type === 'number') {\n            current++;\n            return {\n                type: 'NumberLiteral',\n                value: token.value\n            }\n        }\n\n        // 处理函数\n        if(token.type === 'function') {\n            current++;\n            // 处理基础节点\n            let node = {\n                type: 'CallExpression',\n                name: token.value,\n                params: []\n            }\n            // 处理函数参数\n            token = tokens[current];\n            // 匹配\"(\"\n            while(LEFT_PAREN_TOKEN.test(token.value) || COMMA_TOKEN.test(token.value)) {\n                node.params.push(traverse());\n                token = tokens[current];\n                // 如果匹配到的是\",\"则继续循环\n                if(COMMA_TOKEN.test(token.value)) {\n                    current++; // 跳过逗号\n                }\n            }\n            current++; // 跳过\")\"\n            return node;\n        }\n\n\n    }\n\n    // 基础的AST结构\n     let ast = {\n        type: 'program',\n        body: []\n     }\n\n     let current = 0; // 当前指针\n\n     // 一个一个提取处理token\n     while(current < tokens.length) {\n        const body = traverse();\n        body && ast.body.push(body);\n     }\n     \n\n    return ast;\n}\n\n\nconst ast = parser(tokens);\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 4.interpreter\n// 后续遍历ast完成计算\nfunction interpreter(ast) {\n   const operators = {\n      Add: (a,b) => a + b,\n      Subtract: (a,b) => a - b,\n      Multiply: (a,b) => a * b,\n      Divide: (a,b) => a / b,\n   }\n\n    function traverse(node) {\n        switch(node.type) {\n            case 'NumberLiteral':\n                return node.value\n            case 'CallExpression':\n                const args = node.params.map(traverse);\n                const operator = operators[node.name];\n                return operator(...args);\n        }\n    }\n\n    return traverse(ast.body[0]);\n}\n\ninterpreter(ast);\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);